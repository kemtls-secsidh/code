{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:PKBDecompression
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:PKBDecompression_extended
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:PKADecompression_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:Tate?_pairings
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:FirstPoint3n
    fun:BuildOrdinary3nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:SecondPoint3n
    fun:BuildOrdinary3nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:BiQuad_affine
    fun:BuildOrdinary3nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:makeDiff
    fun:BuildOrdinary3nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:BuildEntangledXonly
    fun:BuildOrdinary2nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:CompleteMPoint
    fun:BuildOrdinary2nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:RecoverY
    fun:BuildOrdinary2nBasis_dual
}
{
    Compression does not need to be constant time
    Memcheck:Cond
    ...
    fun:solve_dlog
}
{
   Vartime binary gcd for inverse of final C24 is safe.
   # Review: https://github.com/open-quantum-safe/liboqs/issues/888
   Memcheck:Cond
   ...
   fun:fp2inv*_mont_bingcd
   src:sidh_compressed.c:124 # fun:FullIsogeny_A_dual
}

{
   Vartime binary gcd for inverse of final C24 is safe.
   # Review: https://github.com/open-quantum-safe/liboqs/issues/888
   Memcheck:Cond
   ...
   fun:fp2inv*_mont_bingcd
   src:sidh_compressed.c:398 # fun:FullIsogeny_B_dual
}
