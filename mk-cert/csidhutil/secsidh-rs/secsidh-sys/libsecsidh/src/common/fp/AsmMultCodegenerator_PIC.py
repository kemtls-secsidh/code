#!/usr/bin/env sage -python


# how to call
# sage -python AsmMultCodegenerator.py  > fp9216.s

from sage.all import *
import math

#///////////////////////////////////////////////////
#//p word extractor [repeat pword times]
def WordExtractor(p, pwords, Var):

    k = 64
    PWord = []
    S =  ".global " + Var + "\n" + Var + ":\n"

    pp = p

    for i in range(1,pwords+1):
        if (((i - 1)%4) == 0):
            S = S + ".quad "
        #PWord[i] = pp%2**k
        PWord.append(pp%2**k)
        if((i%4) != 0):
            #S = S + str(hex(PWord[i-1])).upper() + ","
            S = S + "0x{:X}".format(PWord[i-1]) +  ","
        else:
            #S = S + str(hex(PWord[i-1])).upper() + " \n"
            S = S + "0x{:X}".format(PWord[i-1]) +  " \n"
        pp = pp // (2**k)

    S =  S + "\n\n"
    
    print(S)
    return S


#//////////////////////////////////////////////////////////////////
def PrintHeader(pbits, pbytes, plimbs):

    S = ".intel_syntax noprefix\n\n"
    S = S + ".section .rodata\n\n"
    S = S + ".set pbits," + str(pbits) + "\n"
    S = S + ".set pbytes," + str(pbytes) + "\n"
    S = S + ".set plimbs," + str(plimbs) + "\n\n"
    print(S)
    return S

#//////////////////////////////////////////////////////////////////
def PrintUintHeader(plimbs):

    S = ".intel_syntax noprefix\n\n"
    S = S + ".section .rodata\n\n"
    S = S + ".global uintbig_1\nuintbig_1:\n"
    S = S + "    .quad 1, 0, 0, 0\n"

    N = (plimbs//4) -1;
    for i in range(1, N+1):
        S = S + "    .quad 0, 0, 0, 0\n"

    N = plimbs%4; 
    if (N != 0):
        S = S + "    .quad"
        for i in range(1,N):
                S = S + " 0,"
        S = S + "0\n"

    S = S + ".section .text\n\n"

    S = S + ".global uintbig_add\nuintbig_add:\n    mov rax, [rsi +  0]\n    add rax, [rdx +  0]\n    mov [rdi +  0], rax\n    .set k, 1\n"

    S = S + "    .rept " + str(plimbs-1) + "\n"

    S = S + "mov rax, [rsi + 8*k]\n        adc rax, [rdx + 8*k]\n        mov [rdi + 8*k], rax\n        .set k, k+1\n    .endr\n    setc al\n    movzx rax, al\n    ret\n\n"

    S = S + ".global uintbig_sub\nuintbig_sub:\n    mov rax, [rsi +  0]\n    sub rax, [rdx +  0]\n    mov [rdi +  0], rax\n    .set k, 1\n"

    S = S + "    .rept " + str(plimbs-1) + "\n"

    S = S + "      mov rax, [rsi + 8*k]\n        sbb rax, [rdx + 8*k]\n        mov [rdi + 8*k], rax\n        .set k, k+1\n    .endr\n    setc al\n    movzx rax, al\n    ret"

    print(S)
    return 0

#////////////////////////////////////////
def PrintFooter():

    # S = ".section .data\n\n"
    # S = S + ".global fpadd\nfpadd:\n     .quad 0\n\n"
    # S = S + ".global fpsqr\nfpsqr:\n     .quad 0\n\n"
    # S = S + ".global fpmul\nfpmul:\n     .quad 0\n\n"
    S = ".section .text\n\n.p2align 4,,15\n\n"
    #S = S + ".global init_counters\ninit_counters:\n      ret\n\n"
    #S = S + ".global init_counters\ninit_counters:\n      movq [rip + fpadd], 0\n      movq [rip + fpsqr], 0\n      movq [rip + fpmul], 0\n      ret\n\n"
    S = S + ".global fp_copy\nfp_copy:\n    cld\n    mov rcx, plimbs\n    rep movsq\n    ret\n\n"
    S = S + ".global fp_cswap\nfp_cswap:\n    movzx rax, dl\n    neg rax\n    .set k, 0\n    .rept plimbs\n        mov rcx, [rdi + 8*k]\n"
    S = S + "        mov rdx, [rsi + 8*k]\n        mov r8, rcx\n        xor r8, rdx\n        and r8, rax\n\n        xor rcx, r8\n        xor rdx, r8\n\n"
    S = S + "        mov [rdi + 8*k], rcx\n        mov [rsi + 8*k], rdx\n\n        .set k, k+1\n    .endr\n    ret\n\n"
    S = S + ".global fp_cmov\n"
    S = S + "fp_cmov:\n"
    S = S + "    movzx rax, dl\n"
    S = S + "    neg rax\n"
    S = S + "    .set k, 0\n"
    S = S + "    .rept plimbs\n"
    S = S + "        mov rcx, [rdi + 8*k]\n"
    S = S + "        mov rdx, [rsi + 8*k]\n"
    S = S + "        xor rdx, rcx\n"
    S = S + "        and rdx, rax\n"
    S = S + "        xor rcx, rdx\n"
    S = S + "        mov [rdi + 8*k], rcx\n"
    S = S + "        .set k, k+1\n"
    S = S + "    .endr\n"
    S = S + "    ret\n"
    print(S)
    return S

#////////////////////////////////////////
def PrintRedOnce(pbytes):

    # Reg_Ar = ["rdi", "rsi", "rdx", "rcx", "r8", "r9", "r10", "r11"]
    Reg_Ar = ["rdi", "rsi", "rdx", "rcx", "r8", "r9", "r10", "r11"]

    S = ".reduce_once:\n    push rbp\n    push r12\n    push r13\n    mov rbp, rdi\n    mov r12, p@GOTPCREL[rip]\n\n    mov rdi, [rbp +  0]\n    sub rdi, [r12]\n"

    N = pbytes-8

    for i in range(8,N+1,8):

        # S = S + "    mov " + Reg_Ar[(int(i/8) % 8)] + ", [rbp +  " + str(i) + "]\n    mov r13, [r12 + " + str(i) + "]\n    sbb " +  Reg_Ar[(int(i/8) % 8)] + ", r13\n"
        S = S + "    mov " + Reg_Ar[(int(i/8) % 8)] + ", [rbp +  " + str(i) + "]\n    sbb " +  Reg_Ar[(int(i/8) % 8)] + ", [r12 + " + str(i) + "]\n"
        if ((int((i+8)/8)%8) == 0) and (i != 0):
            S = S + "\n"

    S = S + "\n    setnc al\n    movzx rax, al\n    neg rax\n\n"
    S = S + ".macro cswap2, r, m\n    xor \\r, \\m\n    and \\r, rax\n    xor \\m, \\r\n.endm\n\n\n"

    n = -(int(pbytes/8) % 8) +8

    for i in range(1, n+1):
        S = S + "    cswap2 " + Reg_Ar[i-1] + ", [rbp +  " + str((pbytes-n*8)+(i-1)*8) + "]\n" 


    N = N - (n*8)
    M = math.ceil(N/64)
    for j in range(1, M+1):

        S = S + "\n    mov rdi, [rbp +  0]\n    sub rdi, [r12]\n"
        for i in range(8,N+1,8):        
            # S = S + "    mov " + Reg_Ar[int(i/8) % 8] + ", [rbp +  " + str(i) + "]\n    sbb " + Reg_Ar[int(i/8) % 8] + ",  [rip + p + " + str(i) + "]\n"
            S = S + "    mov " + Reg_Ar[int(i/8) % 8] + ", [rbp +  " + str(i) + "]\n    sbb " + Reg_Ar[int(i/8) % 8] + ", [r12 + " + str(i) + "]\n"
            if ((int((i+8)/8)%8) == 0) and (i != 0):
                S = S + "\n"
        for i in range(1,9):
            S = S + "    cswap2 " + Reg_Ar[i-1] + ", [rbp +  " + str((N-64)+i*8) + "]\n"
        N = N - 64

    S = S + "    pop r13\n    pop r12\n    pop rbp\n    ret\n\n"

    print(S)
    return S

#////////////////////////////////////////
def PrintSub():

    S= ".global fp_add2\nfp_add2:\n  mov rdx, rdi\n\n"
    # S = S + ".global fp_add\nfp_add:\n  push rdi\n  call uintbig_add\n  pop rdi\n\n  incq [rip + fpadd]\n\n  jmp .reduce_once\n\n"
    S = S + ".global fp_add\nfp_add:\n  push rdi\n  call uintbig_add\n  pop rdi\n\n  jmp .reduce_once\n\n"
    S = S + ".global fp_sub2\nfp_sub2:\n  mov rdx, rdi\n  xchg rsi, rdx\n\n.global fp_sub\nfp_sub:\n  push rdi\n  call uintbig_sub\n  pop rdi\n\n\n"
    # S = S + "  incq [rip + fpadd]  /* increasing number of additions performed */\n\n  neg rax\n\n  sub rsp, pbytes\n\n"
    S = S + "  neg rax\n\n  sub rsp, pbytes\n\n"
    S = S + "  mov r8, p@GOTPCREL[rip]\n  mov rcx, [r8]\n  and rcx, rax\n  mov [rsp + 0],rcx\n  .set k, 1\n  .rept plimbs-1\n      mov rcx, [r8 + 8*k]\n      and rcx, rax\n"
    # S = S + "  mov r8, p@GOTPCREL[rip]\n  mov rcx, [r8]\n  and rcx, rax\n  mov [rsp + 0],rcx\n  .set k, 1\n  .rept plimbs-1\n      mov r13, [r8 + 8*k]\n      mov rcx, r13\n      and rcx, rax\n"
    S = S + "      mov [rsp + 8*k], rcx\n      .set k, k+1\n  .endr\n\n"
    S = S + "  mov rcx, [rsp +  0]\n  add rcx, [rdi +  0]\n  mov [rdi +  0], rcx\n  .set k, 1\n  .rept plimbs-1\n      mov rcx, [rsp + 8*k]\n"
    S = S + "      adc rcx, [rdi + 8*k]\n      mov [rdi + 8*k], rcx\n      .set k, k+1\n  .endr\n\n  add rsp, pbytes\n  ret\n\n\n"
    S = S + "/* Montgomery arithmetic */\n\n.global fp_enc\nfp_enc:\n    mov r8, r_squared_mod_p@GOTPCREL[rip]\n    lea rdx, [r8]\n    jmp fp_mul\n\n"
    S = S + ".global fp_dec\nfp_dec:\n    mov r8, uintbig_1@GOTPCREL[rip]\n    lea rdx, [r8]\n    jmp fp_mul\n\n\n"

    print(S)
    return S

#////////////////////////////////////////
def PrintMul(pbytes, pwords):

    Reg_Ar = ["rbx", "rcx"]

    S = ".global fp_mul2\nfp_mul2:\n  mov rdx, rdi\n.global fp_mul\nfp_mul:\n  push rbp\n  push rbx\n  push r14\n\n"
    #S = S +"  incq [rip + fpmul]  /* increasing number of multiplications performed */\n\n"

    S = S + "  sub rsp, " + str(pbytes + 16) + "\n  mov [rsp+ " + str(pbytes+8) + "],rdi\n  mov rdi,rsi\n  mov rsi,rdx\n\n\n"
    S = S + "  xor rax,rax\n"

    N = pbytes

    for i in range(0,N+1,8):
        S = S + "  mov [rsp+" + str(i) + "],rax\n"



    S = S + "\n\n.macro MULSTEP, k, "
    R = ""
    for i in range(0, pwords):
        R = ""
        R = R + "I" + str(i) + ","
        S = S + R

    S = S + "I" + str(pwords) + "\n\n"
    # S = S + "    mov r11,[rsp+\\I0]\n    mov rdx, [rsi +  0]\n    mulx rcx, rdx, [rdi + 8*\\k]\n    add rdx, r11\n    mulx rcx, rdx, [rip + inv_min_p_mod_r]"
    S = S + "    mov r11,[rsp+\\I0]\n    mov rdx, [rsi +  0]\n    mulx rcx, rdx, [rdi + 8*\\k]\n    add rdx, r11\n    mov rax, inv_min_p_mod_r@GOTPCREL[rip]\n    mulx rcx, rdx, [rax]"    
    S = S + "\n\n    xor rax, rax /* clear flags */\n\n\n"

    S = S + "    mov r14, p@GOTPCREL[rip]\n    mulx rbx, rax, [r14]\n    adox r11, rax\n    mov [rsp+\\I0], r11\n\n"

    N = pbytes-8

    for i in range(8,N+1,8):
        S = S + "    mov r11,[rsp+\\I" + str(int(i/8)) + "]\n    mulx " + Reg_Ar[(int(i/8) % 2)] + ", rax, [r14 + " + str(i) + "]\n "
        # S = S + "    mov r11,[rsp+\\I" + str(int(i/8)) + "]\n    mulx " + Reg_Ar[(int(i/8) % 2)] + ", rax, [rip + p + " + str(i) + "]\n "
        S = S + "   adcx r11, " + Reg_Ar[-(int(i/8) % 2) +1] + "\n   adox r11, rax\n    mov [rsp+\\I" + str(int(i/8)) + "],r11\n\n"

    S = S + "\n    mov r11,[rsp+\\I" + str(pwords) + "]\n    mov rax, 0\n    adcx r11, rcx\n    adox r11, rax\n    mov [rsp+\\I" + str(pwords) + "],r11\n\n"
    S = S + "    mov rdx, [rdi + 8*\\k]\n\n    xor rax, rax /* clear flags */\n\n"

    S = S + "    mov r11,[rsp+\\I0]\n    mulx rbx, rax, [rsi +  0]\n    adox r11, rax\n    mov [rsp+\\I0],r11\n\n"

    for i in range(8,N+1,8):
        S = S + "    mov r11,[rsp+\\I" + str(int(i/8)) + "]\n    mulx " + Reg_Ar[int(i/8) % 2] + ", rax, [rsi +  " + str(i) + "]\n"
        S = S + "    adcx r11, " + Reg_Ar[-(int(i/8) % 2) +1] + "\n    adox r11, rax\n    mov [rsp+\\I" + str(int(i/8)) + "],r11\n\n"

    S = S + "    mov r11,[rsp+\\I" + str(pwords) + "]\n    mov rax, 0\n    adcx r11, rcx\n    adox r11, rax\n    mov [rsp+\\I" + str(pwords) + "],r11\n\n.endm\n\n"

    T = ""
    for i in range(0, pwords):
        T = T + "MULSTEP " + str(i) + ","
        for j in range(8,pbytes+1,8):
            T = T + str((j + i*8) % (pbytes + 8)) + ","
        S = S + T
        T = ""
        S = S + str((pbytes +8 + i*8) % (pbytes + 8)) + "\n"
    
    S = S + "\n\n    mov rdi,[rsp+" + str(pbytes+8) + "]\n\n"

    for i in range(0,N+1,8):
        S = S + "    mov r11,[rsp+" + str(i) + "]\n    mov [rdi+" + str(i) + "],r11\n"


    S = S + "    add rsp," + str(pbytes+16) + "\n\n    pop r14\n    pop rbx\n    pop rbp\n\n    jmp .reduce_once\n\n\n"
    # S = S + ".global fp_sq1\nfp_sq1:\n    mov rsi, rdi\n.global fp_sqr\nfp_sqr:\n    mov rdx, rsi\n\n    decq [rip + fpmul]\n    incq [rip + fpsqr]\n\n    jmp fp_mul\n"
    S = S + ".global fp_sq1\nfp_sq1:\n    mov rsi, rdi\n.global fp_sqr\nfp_sqr:\n    mov rdx, rsi\n\n    jmp fp_mul\n"


    print(S)
    return S


#////////////////////////////////////////
def PrintPow(pwords):

    S = ".global fp_pow\nfp_pow:\n    push rbx\n    mov rbx, rsi\n    push r12\n    push r13\n    push rdi\n    sub rsp, pbytes\n\n"
    S = S + "    mov rsi, rdi\n    mov rdi, rsp\n    call fp_copy\n\n    mov rdi, [rsp + pbytes]\n    mov r14, fp_1@GOTPCREL[rip]\n    lea rsi, [r14]\n    call fp_copy\n\n"
    S = S + ".macro POWSTEP, k\n        mov r13, [rbx + 8*\\k]\n        xor r12, r12\n\n"
    S = S + "        0:\n        test r13, 1\n        jz 1f\n\n        mov rdi, [rsp + pbytes]\n        mov rsi, rsp\n        call fp_mul2\n\n"
    S = S + "        1:\n        mov rdi, rsp\n        call fp_sq1\n\n        shr r13\n\n                inc r12\n                test r12, 64\n        jz 0b\n.endm\n\n"

    for i in range(0, pwords):
        S = S + "    POWSTEP " + str(i) + "\n"

    S = S + "    add rsp, pbytes+8\n    pop r13\n    pop r12\n    pop rbx\n    ret\n\n\n"

    print(S)
    return S

#////////////////////////////////////////
def PrintOthers():
    # S = ".global fp_inv\nfp_inv:\n    mov r14, p_minus_2@GOTPCREL[rip]\n    lea rsi, [r14]\n    jmp fp_pow\n\n\n"
    # S = S + ".global fp_issquare\nfp_issquare:\n    push rdi\n    mov rax, p_minus_1_halves@GOTPCREL[rip]\n    lea rsi, [rax]\n    call fp_pow\n    pop rdi\n\n"
    # S = S + "    xor rax, rax\n    mov r12, fp_1@GOTPCREL[rip]\n    .set k, 0\n    .rept plimbs\n        mov rsi, [rdi + 8*k]\n        xor rsi, [r12 + 8*k]\n        or rax, rsi\n"
    # # S = S + "    xor rax, rax\n    mov r12, fp_1@GOTPCREL[rip]\n    .set k, 0\n    .rept plimbs\n        mov rsi, [rdi + 8*k]\n        mov r13, [r12 + 8*k]\n        xor rsi, r13\n        or rax, rsi\n"    
    # #S = S + "    xor rax, rax\n    .set k, 0\n    .rept plimbs\n        mov rsi, [rdi + 8*k]\n        xor rsi, [rip + fp_1 + 8*k]\n        or rax, rsi\n"
    # S = S + "         .set k, k+1\n    .endr\n    test rax, rax\n    setz al\n    movzx rax, al\n    ret\n\n\n"

    S = ".global fp_random\nfp_random:\n\n    push rdi\n    mov rsi, pbytes\n    call randombytes\n    pop rdi\n"
    S = S + "    mov rax, 1\n    shl rax, (pbits % 64)\n    dec rax\n    and [rdi + pbytes-8], rax\n    mov r8, p@GOTPCREL[rip]\n    .set k, plimbs-1\n    .rept plimbs\n"
    S = S + "        mov rax, [r8 + 8*k]\n        cmp [rdi + 8*k], rax\n        jge fp_random\n        jl 0f\n        .set k, k-1\n    .endr\n    0:\n    ret"

    print(S)
    return S

#////////////////////////////////////////
def Print_Parameters(p, pbits, pbytes, pwords):

#// Montgomery parameter R
    R = 2**(64*pwords)
    RR = IntegerModRing(R)

#//Extracting p words and saving in file
    P = WordExtractor(p, pwords, "p");

# // Computing -(1/p) mod R;
    #pinv = IntegerRing()!(RR!(-1/p))
    pinv = int(RR(-p).inverse_of_unit())
    #pinv = -(1//p)%R

# //Extracting pinv words and saving in file
    Pinv = WordExtractor(pinv, pwords, "inv_min_p_mod_r")

    S = "uintbig_1_fp:\n"
    S = S + "    .quad 1, 0, 0, 0\n"

    N = (pwords//4) -1;
    for i in range(1, N+1):
        S = S + "    .quad 0, 0, 0, 0\n"
    S = S + "\n"
    
# // Printing zero
    S = ".global fp_0\nfp_0:\n.zero pbytes\n\n"
    print(S)
# PrintFile(Name, S);

# // 1 at Montgomery domain
    one = R%p

# //Extracting one words and saving in file
    ONE = WordExtractor(one, pwords, "fp_1")

# // 1 at Montgomery domain
    two = (R+one)%p

# //Extracting one words and saving in file
    TWO = WordExtractor(two, pwords, "fp_2")    

# // R^2 at Montgomery domain
    Rsqr = R**2%p

# //Extracting Rsqr words and saving in file
    RsqrWords = WordExtractor(Rsqr, pwords, "r_squared_mod_p ")

# //Extracting p-2 words and saving in file
    pminus2Words = WordExtractor(p-2, pwords, "p_minus_2")

# //Extracting phalves words and saving in file
    phalvesWords = WordExtractor((p-1)//2, pwords, "p_minus_1_halves")

# //Extracting pquarters words and saving in file
    pquartersWords = WordExtractor((p-3)//4, pwords, "p_minus_3_quarters")

# //Printing footer
    S = PrintFooter()

    return 0

#////////////////////////////////////////
def Print_Assembly(p):

#// size of p in bits, bytes ,words
    pbits = math.ceil(math.log(p, 2.0))
    pbytes = math.ceil(pbits/8)
    if((pbytes%4) != 0):
        pbytes = pbytes + 4 - (pbytes%4)
    pwords = math.ceil(pbits/64)

#// Writing header;
    S = PrintHeader(pbits, pbytes, pwords)

#// Writing parameters;
    S = Print_Parameters(p, pbits, pbytes, pwords)

#// Printing Reduce Once
    S = PrintRedOnce(pbytes)

#// Printing Add_Sub
    S = PrintSub()

#// Printing Mult
    S = PrintMul(pbytes, pwords)

#// Printing Pow
    # S = PrintPow(pwords)

#// Printing Others
    S = PrintOthers()

    return 0;


#//+++++++++++++++ Main ++++++++++++++++++//

# Primes of the form p := 2^e * prod(ell_i's) - 1
p_2047d221 = 0x5160D4543A2596D320C080B284C0FA5D3600AE4E29B85374858B238036139EA0B8B0C8B2850475382865FD4C9F7C3B5E531ED7D0FC022A13270300584EC78190FD09755A56CFEB1FC6961581CDFC56E824D0F31C4D4ECF04C5243CA0651820AF413023A7310203F74858FBECACA26B375BEBA9DE78CC420A069477B7FE595F83B148223C6841B3592C74AF79F39AE8F3D64F8B9FC946BB1C84A4541CBC2F363029B2C1E296158774A9646D2E186AD699B304FC7311F0DEC85E651756DDB4E3888D02333D591583AE5DB2F656E63A6179CDB059ED9BF90BAD614DCA5628C940C5004D99FB1CB03CE478F65726B12E42FA1C7C8FFFFFFFFFFFFFFFFFFFFFFFFFFF
p_2047n221 = 0x459AEF6A877E5ADAA0902C6A81793F136D3E606CECECC229616377E3B9C4A5630F19ADD54D8C5523E1A3AED0A5CB129A69220DB334EFF4A66BFA495ACCBFA7A31B1097D145C0FB10A0427AD5EE55DA93D7B04D72732719ACF7C00FC0BCDC2ADD1DCC5DD91163C9547109B0A8A65EC1BDEB34774FB24FE7A88EEC915BE40A0402A3D8A48E8371EC94456DE1CB00A2F8C07FAF5AACAB12ED8E6C81F4CD3BFE4FB5C3A08FCD2434148F82FEEC069F4509398AEDB078EAD657ED2D3BB68D87A80459D590CF47C1CD12CFE0A33DE40AB61EC18AD9791E0024F0E7EF3E782F87E2823D2B205845C6ED21AEB7E8298551D41019334FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
p_2047k221 = 0x4f49aaf26e4aefb626bb94dc36fd0732eff9ff84c9b3b1b49c85afe27f67725f25d9e24a0748378bdebd472aa103a02b9c3c0fc3740c26d882af03859d69962d0ce8ad54d154c156241fe343116b31776c0e7aab1bf721dfac0073a2b919b0a4b543b329bed97c9490c340c95add5f8c457afa1ae8c5352a05816da706eb3cab844d51d759b0c53089a678df7aae625ba90481e7927800a6ac53715e3b7b996293f4fab37d61640dffc6c6b2579b25d1d51310e46e8c2b097835f78ebc56ce0c478af769ae62b6e0f6d3630a6ebae5ed1a549b7f4b8f58f1f61fe1a2e6d6cac6c5a05e7d325440ecfc70c3714d157138c90a04ffffffffffffffffffffffffff
p_2047k221 = 0x6a4ff04747b46a2f4dde4abcb2f5b10122d1faca9d31875809e963638633189bf49f52f845c38159833216ee84627bf1bc69fba003d977fa0129d69404a2454784a6506a59939a44fd9df099291153b8657bbe01cfe83bfdc9b5f14c17564ace1d292f31eab4941bc1df718427e55ac4f983caf742656daade5f818a8228c843adc38cb70e857459fa9f2833e64f230057a5c3ca5146957e0b87cdccc568f56bdea8fb7c3e5851e3ccfc6757bce7de6315e7e49331c2f107db7aa6a4679b9a1e7f588bc66e07055cb8c57e91e7b8cd82dc0cda440051fc011ca0b71477ef33b3efe5a7562778f9aa9aca6231addc9f05a346ec323db45e15f7ef996ee286efff

# Primes of the form p := 2^e - c 
p_4095d221 = 0x

p_4095n221 = 0x61310369972A4B9B00C77CD8A684A52B4022C66CC2886F384E528142345E2ACEABDBAC83F24EFCC857E3EEAB963F27181DDA55815ED64FAD9227AB5C396844A40CD5AD68AA34B4CF90603110B1D1C7D956ECEFA48210B81233903CE65CDACD88EB7689256846240A2C0E45BFBADEEF7E51F3C03844AED8C4F63C2698B01AC7EB524729C4027A54F8F3ECE58369147F3AFB702900833404CBFA3423350E21EE6F2AEB83F7FCE2FC5845B2E482BD823BD20A87348D64EE5DC9458556449719A006C16480BEF979204C8934FA4C56111C6431E687622A63AF2F6B3B8FECF8C17E6BEC9C64C02737E8F06245384BECE764016DD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

p_4095k256 = 0x47df1bed926b3ac9627b08feb90a8490aade61945f8ae99f608d0ff735d0abb9533f33caa89e8487b961c86b9ab57c35a22108fbbf709ebf94116953ce9e76ffab53247f88df7f7a5f9b0d210c56f8f062f3fcac66d97c78a556349d51ff4f46eb058573ce240f88c1e76d615c55d39c920fad0ab8c53dec6797c15ade6fc067af581dad341e77368b8d69e7ac15ec054cb0c8f4d65a462191c11928b06e3fbea44fa639976ac4e72321418bc30a539a797e5708f727ed7471157d20bf37675adde49f6161571fd84ec8b118af8dbc533b060db5e11ab944f7f6282402f363a10dbdce9c5b4a495f31e5ff951b6d7341d3f92a67c410393358bd5bbba27779bc96fe98e120b09bc337972594a6c994eefb85d331bf15dbf369596010d224550565888c198a8e59fb3b78d7b10f1cb8f4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

p_5119d256 = 0x

p_5119n234 = 0x62E64FC1B5AF0EE099BB15D13615399AD76B20FABEF18798B083E04CE2451C192143C7C1D20F8A1E50FAA444AF175E2E04721865ED0997D78BD72049D45279B635EFE6DB51E8E59A644F482580CD9B9DBE53A98B343F3C622B045EED32E38FFADCBF712BA03DAEE5C974DA9C0A26BBE16081614BCA1ACCD08CBCB1DAF42C60AE6EA2640F6059502C18620A81808843890899A4AA517F4ED87776734F954C25C1CDA1663A023E1580FF4744A13922A7787F1A3704DDD65B51048F961B403C1D1A3EF123FE4C97F45F72DE77EFAE82A1CF91C864163D716A77252A1760B77696E300C45106633A6509EF0F26BE1150D17484B0565BE4705039B328B7B9EE7144E65CB9A7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


p_5119k234 = 0x6020eb29a152ad5f93a14a8a040ecbd42132f7b67412060b4907fb14725711f2994de9fa51639c1dc76f78378b76243425529cd9b432f7071f166b7a23e849b55d98ddb04f236ac61aedff7abbd033803eb030efe24f606ecba1d52981546d14d9059c466ba6095b4a4bf83147c01f3a0d2257bed2c00854966a6c73f126a7fa4a2e0b5d9e3d744aa1160ac1b85c89ad4df7cbb62e4281f0b1fe257416d05092080643c752d3f0bfb30d2e40db42513a182dc9e83cc912b18b0742f099c755e4257f8cbb1ad63459321da18b685fa9864433973b01a89610b269f7eff29ee16b099a550e13c0f21683b80791506a02bea5277c5a1edf42740a2a4d3afcd84cb1f100763480d81d6571bab792ccf26c3331c122b2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

p_6143d306 = 0x

p_6143n234 = 0x56B4BCED8AEA73BE1927D4EF3D7DB21FB945B92EEE78ED2804A1327FAE7CB74931FD3ACA6E4C4B2AF740E536D7BB40FA42F276570DCA14F666042E9C1C55A0186EF8C2449B804EF872624DB20E5E10E7AFD7393D49453BEFA55B1B74830F6D2449F507E5C96DB7129E88A38007D24055B73DCE9F93FE5DB63E32323BD5D45769715CC0B3CF5564813EC6A261669CF03B5DA022545A673DC2998FB078966081FD59F0A262F50EAD4F1FB6E7D530A42399C3E20E5C4ECE626888E6275289B449DA494D3705D8072B20C0C80910CD25F15FF80A94953B3536FDFDB8D5A9550772779D5D3B527B1BC15F7B5DD3071F9D7256400FF68A18FF7BF9598B645956AD5B63B79AA7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

p_6143k256 = 0x4b52cce89e8e10aa4c32eab208c6e5cebb6d10eb0c6c11e5305e539f114ad8ed1d8333732c8142b580480988522c5703f6f73f7357dd8f6e260de537cdb28252251acca5a5eb867e12ebe4e03bcbd891792c81c648cab8cb0c83174128dc676f79a5b88c7fe6d95fe3945ba3564dd6506c0e75f1235909ce92d9ecf65f9b3fd49a2ffacba15a61101d384e247a3fa6bd25223e09b7bf27c491cbff70ac345b5a7837daa51f59cdfa79dabe4d2f2a1e0f91707210201d3a74531b77e3e1eb32a2a4fc04deb27f0f974ebfb033649a801241df8b0b4f3e178b3cf8373b1a6d448d274e59f92bd34d4d92c4b7dd1100adfac5d744baf407415205c175cc1be876a72674b4838fad59eb6b8ef3bd24fa010dccfb305c48d4d50540803af2fc159ef23c7ea8e3c554965ab1a73428ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

p_8191d306 = 0x

p_8191n332 = 0x4B9B357A60232E5AC7470A7824CC594F6A618A32EB1AEEA75F799EAC0B861CAC40BCC5A23DE5BA99D3F7B35C0FC8F8A41BBFCBA6431196F21DA8F5B1DFC31AFC17763F53A26B5483D1D5A3188BD0BE6C705865935F592D749340AB0C4766CF8CF2616719DD9B13472B78C46565423F31A12F9500A9B3D66A84E1817FD92CF87E830CCBFDC8059FE938D0057034AA944083E50ABFD32E5C2AF518C7F0B591DB109BCDA0D4A69044D67A798CFA07EEB100E577E8F21BD02023D8A40E685605795119E5597AE1971DB163F57525ABF66CAD4917AB4E63334B4D30AD9AE0E6E1190A71C548BDE8055E09AD7F4BD4563630EE40ABF73A93264D23FC3D664C235C4027E6B42ABB16E9E575DC21523AAEEDDE813AD33A6CC5ADEB9CA1C97E9060A18F98BBE35EF63F63990F91269D92DCF4CC1FC7D9FFFE10482C5A4DB7DE980091F6941E9448C6D4CD1D53621B3CE2C77236AA9FBE76B73A280F906A72468566F3C1023DB7539BEEBFFF2EAD9E18D4E9157AEB8764A2EBF92D04617F2A05570388B79BB97A231AA362C21FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


p_8191k332 = 0x45802b9c1ff4ee8338ac9c70136407d51be4619762bf3d6959a6f0ccd64a936382b9ea8d5f9d5a7143c05d102bb2082292dc9513ad93c2eab471aee5d6de1cb9331dfc0b2695d0ab8912950385c91e7cf0d0392d1336fce65bcb51797afaaff1448b344ee77d5f460a6abf88acf95b5cb9c4c3192ee8844e36ac69423d5e6089693053a8da54b9337520d28f0f83361f46320e442c8bc50ad3a893872a7f55d46201df9a8eb122cf978a75239b4e7ace7d78a167b9867de49ebaa03bf78873d9f54d43218402e0cdc10f204742cb3572fe225c377a7ff1c3e5a9167011db309253d6731d98fed8adee043365ea3a993caf603bf6cd7841470db8b41875429d8134de7732847b9c265d83cd758e3646e22e4918a54ba2e2c04a0f74c0bcd7d54f27ce2be64cbdc9b68db838d14958625706a2381351243dd2fb768ad4226a291621fb939984cfdc8c05828b0f84aafb84f0c880f300c22c8df1b0a4948fc7120be119a92cf4e2b8aea178d4f608bea75df912cc03e2c4557b537ec480cad755eb7ba474c239058cef2e0621c764440174ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

p_9215d384 = 0x

p_9215n332 = 0x7DF7C28395B5A01B518B53AC71139C6A145556C1B892C07C367DBC714BFEEC7366F0E3EFBFE5A5A65F5F7BBF11CE9313837428E0B986A282D7559348A8FDFA766A457E9318D9922D2C8413F0F32253D94EEB39491BDC0C4EE831DE131605B34CD4EAADBD5D9EAD8A2809A13DAD0A9B2106BC98495E15059F8A6331B6F7D6AA088011840ECACD8CA44C9ABC4F08F6F85705C0248B4AA0C05C5A3A0DA57D70045C8AC8DE54107E559AA00CDC0054B48C1454DB1E0996F98FBED3FD3664C9A41324ACB38BE87F529CF1D1459E3F44FFDC00B6DC4039EEBCFB5134013B530DF7D03966EB212139C99AFC5BF6E6F333198D8365874521776CDAB996181D63DE84F17DF32CCDC3454BDE1A0ECEDCA75E3430C937CBFE5D351ECA1F058834FADF86FAD8AD6E04EC7727347964607029754AFF6A141ED67C9C9E358A26A3E43778146000F4B1F779FD9CF1F272F291B0BF1BAEC6C7594D8E8457B0EA61DB53B76A2DA8DA05D0F62C1D2DBA9180CA327A4934E340E8FBB8442C96983C9AC3DA26FC7E839820BD7C85346ACDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

p_9215k384 = 0x4d0dd48d039de3a7e841e5f92ae94c9c15281c20ef5e3b77e74515e327c953808fc1951a0b63aa289d000e8c5ee1b5b6d1e15edccc3ea7093affec566c311e953419dcb6afda0e094363cfaf112793a5e021aac821b5fd149777ac37e208f29a1b9060660751b405a9255f2dffef2a9da96937dc65c535480d8ecfcbde4d6b715977ac2cace90f15ae8b7d05a9a3098107e5fa4319c3877a628a478fa51248293c0df145b5bd51bcf3264c72939c7e5538022e0311f218e86ad4a3e4198b3c5c5559a516cbf6d8505e1bcdc39f4c8b8f520c24a33c2a46c7c69c26ac0032fe40d231097e09fe98fd2e4ebaa44bf213a5d6544289e2b3acd6f1dd3386ac13f6a71f4be77febba673380fc6d8b97015d3ed3997f280ff40cadca0cc59ece014f78a84638104a9ab88840b2d4dd4b30387a233f0419f2f959c2fb69d6e1f8ab9389f3a1ace18417ab2fa42fa468f0346202c08ace12cf11f19853d89ce34fc62bd14fa19216246934d0bbffc6e78dbc2da3aaf62c413e6e47f1e72faf27764e4cbeda2831ee87cbe75ddae4ab0857a448474f2cec0ce0241b0f90f24807b4b7af9c6bd02b7fce0f4e753671b6b3cd0f7e58e60dbdfab3ffd04ccf5cd95ce82a5c14a433acae72c1d8b46e1c47467499d37558829a4749bfa0d22ec17140ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

p_512k256 = 0x65b48e8f740f89bffc8ab0d15e3e4c4ab42d083aedc88c425afbfcc69322c9cda7aac6c567f35507516730cc1f0b4f25c2721bf457aca8351b81b90533c6c87b


# NIST LEVEL 1
#p_2048 = p_2047d221
#p_4096 = p_4095d221
#p_5120 = p_5119d256

p_2048 = p_2047k221
p_4096 = p_4095k256
p_5120 = p_5119k234


# NIST LEVEL 3
#p_6144 = p_6143d306
#p_8192 = p_8191d306
#p_9216 = p_9215d384

p_6144 = p_6143k256
p_8192 = p_8191k332
p_9216 = p_9215k384

p_512 = p_512k256

def main(argv):
    global printOut
    if(len(argv) < 2):
        print(
            "\nplease specify the prime and desired output [0 = assembly | 1 = UintHeader]\n")
        sys.exit()
    else:
        prime = argv[0]
        length = 0
        if(prime=="512k256"):
            p = p_512k256
            length = 512
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit()
        elif(prime=="2047n221"):
            p = p_2048
            length = 2048
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit()
        elif(prime=="4095n221"):
            p = p_4096
            length = 4096
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit()
        elif(prime=="5119n234"):
            p = p_5120
            length = 5120
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit()    
        elif(prime=="6143n234"):
            p = p_6144
            length = 6144
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit()                              
        elif(prime=="8191n332"):
            p = p_8192
            length = 8192
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit() 
        elif(prime=="9215n332"):
            p = p_9216
            length = 9216
            if(p.bit_length() > length):
                print("\nError : prime p too long\n")
                sys.exit()                                 
        else:
            print("\nError : no prime available for this length\n")
            sys.exit()                 

        if int(argv[1]) == 0 :
            Print_Assembly(p)
        else:
            PrintUintHeader(length//64)

if __name__ == "__main__":
    main(sys.argv[1:])
